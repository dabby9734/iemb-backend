"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleLogin = exports.promptClientToken = void 0;
const openapi_core_1 = require("@redocly/openapi-core");
const colorette_1 = require("colorette");
const utils_1 = require("../utils");
function promptClientToken(domain) {
    return utils_1.promptUser(colorette_1.green(`\n  ðŸ”‘ Copy your API key from ${colorette_1.blue(`https://app.${domain}/profile`)} and paste it below`), true);
}
exports.promptClientToken = promptClientToken;
function handleLogin(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const region = argv.region || (yield openapi_core_1.loadConfig()).region;
        const client = new openapi_core_1.RedoclyClient(region);
        const clientToken = yield promptClientToken(client.domain);
        client.login(clientToken, argv.verbose);
    });
}
exports.handleLogin = handleLogin;
