"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
const path = require("path");
const openapiCore = require("@redocly/openapi-core");
jest.mock('../../../utils', () => (Object.assign(Object.assign({}, jest.requireActual('../../../utils')), { writeYaml: jest.fn() })));
describe('#split', () => {
    it('should have correct paths for mac', () => {
        const pathsDir = 'test/paths';
        const openapiDir = 'test';
        jest.spyOn(openapiCore, 'slash').mockImplementation(() => 'paths/test.yaml');
        jest.spyOn(path, 'relative').mockImplementation(() => 'paths/test.yaml');
        index_1.iteratePaths(require("./fixtures/spec.json"), pathsDir, openapiDir);
        expect(openapiCore.slash).toHaveBeenCalledWith('paths/test.yaml');
        expect(path.relative).toHaveBeenCalledWith('test', 'test/paths/test.yaml');
    });
    it('should have correct paths for windows', () => {
        const pathsDir = 'test\\paths';
        const openapiDir = 'test';
        jest.spyOn(openapiCore, 'slash').mockImplementation(() => 'paths\\test.yaml');
        jest.spyOn(path, 'relative').mockImplementation(() => 'paths\\test.yaml');
        index_1.iteratePaths(require("./fixtures/spec.json"), pathsDir, openapiDir);
        expect(openapiCore.slash).toHaveBeenCalledWith('paths\\test.yaml');
        expect(path.relative).toHaveBeenCalledWith('test', 'test\\paths/test.yaml');
    });
});
