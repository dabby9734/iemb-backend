"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const push_1 = require("../../commands/push");
const login_1 = require("../../commands/login");
jest.mock('fs');
jest.mock('node-fetch');
jest.mock('@redocly/openapi-core');
jest.mock('../../commands/login');
jest.mock('../../utils');
const mockPromptClientToken = login_1.promptClientToken;
describe('push-with-region', () => {
    const redoclyClient = require('@redocly/openapi-core').__redoclyClient;
    redoclyClient.isAuthorizedWithRedoclyByRegion = jest.fn().mockResolvedValue(false);
    beforeAll(() => {
        jest.spyOn(process.stdout, 'write').mockImplementation(() => true);
    });
    it('should call login with default domain when region is US', () => __awaiter(void 0, void 0, void 0, function* () {
        redoclyClient.domain = 'redoc.ly';
        yield push_1.handlePush({
            upsert: true,
            entrypoint: 'spec.json',
            destination: '@org/my-api@1.0.0',
            branchName: 'test'
        });
        expect(mockPromptClientToken).toBeCalledTimes(1);
        expect(mockPromptClientToken).toHaveBeenCalledWith(redoclyClient.domain);
    }));
    it('should call login with EU domain when region is EU', () => __awaiter(void 0, void 0, void 0, function* () {
        redoclyClient.domain = 'eu.redocly.com';
        yield push_1.handlePush({
            upsert: true,
            entrypoint: 'spec.json',
            destination: '@org/my-api@1.0.0',
            branchName: 'test'
        });
        expect(mockPromptClientToken).toBeCalledTimes(1);
        expect(mockPromptClientToken).toHaveBeenCalledWith(redoclyClient.domain);
    }));
});
